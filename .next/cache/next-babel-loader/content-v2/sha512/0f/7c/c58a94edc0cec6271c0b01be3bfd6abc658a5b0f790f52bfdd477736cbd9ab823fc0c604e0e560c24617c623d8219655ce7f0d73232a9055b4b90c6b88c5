{"ast":null,"code":"import _defineProperty from \"/var/www/html/react-test-ashish/react-next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/var/www/html/react-test-ashish/react-next/pages/_app.tsx\",\n    _this = this;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ApolloProvider, ApolloClient, InMemoryCache, ApolloLink, HttpLink } from '@apollo/client';\nimport { onError } from \"@apollo/client/link/error\";\nimport '../styles.css';\nvar GITHUB_BASE_URL = \"https://api.github.com/graphql\";\nvar httpLink = new HttpLink({\n  uri: GITHUB_BASE_URL,\n  headers: {\n    Authorization: \"Bearer 657bb0dac12ed4be579901f1f1ae075a26e2ea7b\" // authorization: `Bearer ${process.env.REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN}`,\n\n  }\n});\nconsole.log('process.env', process);\nvar errorLink = onError(function (_ref) {\n  var graphQLErrors = _ref.graphQLErrors,\n      networkError = _ref.networkError;\n\n  if (graphQLErrors) {\n    graphQLErrors.map(function (_ref2) {\n      var message = _ref2.message,\n          locations = _ref2.locations,\n          path = _ref2.path;\n      return console.log(\"[GraphQL error]: Message: \".concat(message, \", Location: \").concat(locations, \", Path: \").concat(path));\n    });\n  }\n\n  if (networkError) {\n    console.log(\"[Network error]: \".concat(networkError));\n  }\n});\nvar link = ApolloLink.from([errorLink, httpLink]);\nvar client = new ApolloClient({\n  uri: GITHUB_BASE_URL,\n  cache: new InMemoryCache(),\n  link: link\n});\n\nvar MyApp = function MyApp(_ref3) {\n  var Component = _ref3.Component,\n      pageProps = _ref3.pageProps;\n  return /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: client,\n    children: /*#__PURE__*/_jsxDEV(Component, _objectSpread({}, pageProps), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, _this);\n};\n\n_c = MyApp;\nexport default MyApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyApp\");","map":{"version":3,"sources":["/var/www/html/react-test-ashish/react-next/pages/_app.tsx"],"names":["ApolloProvider","ApolloClient","InMemoryCache","ApolloLink","HttpLink","onError","GITHUB_BASE_URL","httpLink","uri","headers","Authorization","console","log","process","errorLink","graphQLErrors","networkError","map","message","locations","path","link","from","client","cache","MyApp","Component","pageProps"],"mappings":";;;;;;;;;;AACA,SAASA,cAAT,EAAyBC,YAAzB,EAAuCC,aAAvC,EAAsDC,UAAtD,EAAkEC,QAAlE,QAAkF,gBAAlF;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,OAAO,eAAP;AAEA,IAAMC,eAAe,GAAG,gCAAxB;AAEA,IAAMC,QAAQ,GAAG,IAAIH,QAAJ,CAAa;AAC5BI,EAAAA,GAAG,EAAEF,eADuB;AAE5BG,EAAAA,OAAO,EAAE;AACPC,IAAAA,aAAa,mDADN,CAEP;;AAFO;AAFmB,CAAb,CAAjB;AAOAC,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BC,OAA3B;AACA,IAAMC,SAAS,GAAGT,OAAO,CAAC,gBAAqC;AAAA,MAAlCU,aAAkC,QAAlCA,aAAkC;AAAA,MAAnBC,YAAmB,QAAnBA,YAAmB;;AAC7D,MAAID,aAAJ,EAAmB;AACjBA,IAAAA,aAAa,CAACE,GAAd,CAAkB;AAAA,UAAGC,OAAH,SAAGA,OAAH;AAAA,UAAYC,SAAZ,SAAYA,SAAZ;AAAA,UAAuBC,IAAvB,SAAuBA,IAAvB;AAAA,aAChBT,OAAO,CAACC,GAAR,qCAC+BM,OAD/B,yBACqDC,SADrD,qBACyEC,IADzE,EADgB;AAAA,KAAlB;AAKD;;AACD,MAAIJ,YAAJ,EAAkB;AAChBL,IAAAA,OAAO,CAACC,GAAR,4BAAgCI,YAAhC;AACD;AACF,CAXwB,CAAzB;AAaA,IAAMK,IAAI,GAAGlB,UAAU,CAACmB,IAAX,CAAgB,CAACR,SAAD,EAAYP,QAAZ,CAAhB,CAAb;AAEA,IAAMgB,MAAM,GAAG,IAAItB,YAAJ,CAAiB;AAC9BO,EAAAA,GAAG,EAAEF,eADyB;AAE9BkB,EAAAA,KAAK,EAAE,IAAItB,aAAJ,EAFuB;AAG9BmB,EAAAA,IAAI,EAAJA;AAH8B,CAAjB,CAAf;;AAMA,IAAMI,KAAyB,GAAG,SAA5BA,KAA4B,QAA8B;AAAA,MAA3BC,SAA2B,SAA3BA,SAA2B;AAAA,MAAhBC,SAAgB,SAAhBA,SAAgB;AAC9D,sBACE,QAAC,cAAD;AAAgB,IAAA,MAAM,EAAEJ,MAAxB;AAAA,2BACE,QAAC,SAAD,oBAAeI,SAAf;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AAKD,CAND;;KAAMF,K;AAQN,eAAeA,KAAf","sourcesContent":["import type { AppProps } from 'next/app';\nimport { ApolloProvider, ApolloClient, InMemoryCache, ApolloLink, HttpLink } from '@apollo/client';\nimport { onError } from \"@apollo/client/link/error\";\nimport '../styles.css'\n\nconst GITHUB_BASE_URL = \"https://api.github.com/graphql\";\n\nconst httpLink = new HttpLink({\n  uri: GITHUB_BASE_URL,\n  headers: {\n    Authorization: `Bearer 657bb0dac12ed4be579901f1f1ae075a26e2ea7b`,\n    // authorization: `Bearer ${process.env.REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN}`,\n  },\n});\nconsole.log('process.env', process);\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors) {\n    graphQLErrors.map(({ message, locations, path }) =>\n      console.log(\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n      )\n    );\n  }\n  if (networkError) {\n    console.log(`[Network error]: ${networkError}`);\n  }\n});\n\nconst link = ApolloLink.from([errorLink, httpLink]);\n\nconst client = new ApolloClient({\n  uri: GITHUB_BASE_URL,\n  cache: new InMemoryCache(),\n  link\n});\n\nconst MyApp: React.FC<AppProps> = ({ Component, pageProps }) => {\n  return (\n    <ApolloProvider client={client}>\n      <Component {...pageProps} />\n    </ApolloProvider>\n  );\n}\n\nexport default MyApp;"]},"metadata":{},"sourceType":"module"}