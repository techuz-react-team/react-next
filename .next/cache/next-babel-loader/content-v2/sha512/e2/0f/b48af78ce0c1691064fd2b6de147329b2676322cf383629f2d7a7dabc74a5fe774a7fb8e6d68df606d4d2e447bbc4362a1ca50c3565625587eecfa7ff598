{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/var/www/html/react-test-ashish/react-next/components/repository.tsx\";\nimport React from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { GET_REPOSITORIES } from \"../queries/queries\"; // type RepoProps = {\n//     nodes: Repos[];\n// };\n\nconst Repository = ({\n  items\n}) => {\n  var _data$viewer, _data$viewer$reposito;\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_REPOSITORIES);\n  const repoList = data === null || data === void 0 ? void 0 : (_data$viewer = data.viewer) === null || _data$viewer === void 0 ? void 0 : (_data$viewer$reposito = _data$viewer.repositories) === null || _data$viewer$reposito === void 0 ? void 0 : _data$viewer$reposito.nodes;\n\n  if (loading) {\n    return \"Loading...\";\n  }\n\n  if (error) {\n    return `Error! ${error.message}`;\n  }\n\n  return items.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: item.id\n  }, item.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 36\n  }, this)); //   return (\n  //     <div className=\"footer\">\n  //       <h3>All Repositories</h3>\n  //       <ul>\n  //         {repoList.map((repo: Inodes, index: any) => {\n  //           return <li key={index}>{repo.name}</li>;\n  //         })}\n  //       </ul>\n  //     </div>\n  //   );\n};\n\nexport default Repository;","map":{"version":3,"sources":["/var/www/html/react-test-ashish/react-next/components/repository.tsx"],"names":["React","useQuery","GET_REPOSITORIES","Repository","items","loading","error","data","repoList","viewer","repositories","nodes","message","map","item","id"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,gBAAT,QAAiC,oBAAjC,C,CAEA;AACA;AACA;;AAWA,MAAMC,UAA+B,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAa;AAAA;;AAEnD,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BN,QAAQ,CAACC,gBAAD,CAAzC;AACA,QAAMM,QAAQ,GAAGD,IAAH,aAAGA,IAAH,uCAAGA,IAAI,CAAEE,MAAT,0EAAG,aAAcC,YAAjB,0DAAG,sBAA4BC,KAA7C;;AAGA,MAAIN,OAAJ,EAAa;AACX,WAAO,YAAP;AACD;;AACD,MAAIC,KAAJ,EAAW;AACT,WAAQ,UAASA,KAAK,CAACM,OAAQ,EAA/B;AACD;;AACD,SAAOR,KAAK,CAACS,GAAN,CAAWC,IAAD,iBAAgB;AAAA,cAAoBA,IAAI,CAACC;AAAzB,KAAUD,IAAI,CAACC,EAAf;AAAA;AAAA;AAAA;AAAA,UAA1B,CAAP,CAZmD,CAcrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,CAxBD;;AA0BA,eAAeZ,UAAf","sourcesContent":["import React from \"react\";\nimport { Inodes, IRepository } from \"../types\";\nimport { useQuery } from \"@apollo/client\";\nimport { GET_REPOSITORIES } from \"../queries/queries\";\n\n// type RepoProps = {\n//     nodes: Repos[];\n// };\n\ninterface Todo {\n    id: number;\n    content: string;\n    completed: boolean;\n  }\n  \n  interface TodoProps {\n    items: Todo[];\n  }\nconst Repository: React.FC<TodoProps> = ({items}) => {\n\n  const { loading, error, data } = useQuery(GET_REPOSITORIES);\n  const repoList = data?.viewer?.repositories?.nodes;\n\n\n  if (loading) {\n    return \"Loading...\";\n  }\n  if (error) {\n    return `Error! ${error.message}`;\n  }\n  return items.map((item: Todo) => <div key={item.id}>{item.id}</div>);\n  \n//   return (\n//     <div className=\"footer\">\n//       <h3>All Repositories</h3>\n//       <ul>\n//         {repoList.map((repo: Inodes, index: any) => {\n//           return <li key={index}>{repo.name}</li>;\n//         })}\n//       </ul>\n//     </div>\n//   );\n};\n\nexport default Repository;\n"]},"metadata":{},"sourceType":"module"}