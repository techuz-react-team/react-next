{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/var/www/html/react-test-ashish/react-next/components/createNewRepo.tsx\",\n    _this = this;\n\nimport React from \"react\";\nimport { withFormik, Form, Field } from \"formik\"; // Shape of form values\n\n// Aside: You may see InjectedFormikProps<OtherProps, FormValues> instead of what comes below in older code.. InjectedFormikProps was artifact of when Formik only exported a HoC. It is also less flexible as it MUST wrap all props (it passes them through).\nvar InnerForm = function InnerForm(props) {\n  var touched = props.touched,\n      errors = props.errors,\n      isSubmitting = props.isSubmitting,\n      message = props.message;\n  return /*#__PURE__*/_jsxDEV(Form, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Field, {\n      type: \"email\",\n      name: \"email\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, _this), touched.email && errors.email && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: errors.email\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 41\n    }, _this), /*#__PURE__*/_jsxDEV(Field, {\n      type: \"password\",\n      name: \"password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, _this), touched.password && errors.password && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: errors.password\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 47\n    }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      disabled: isSubmitting,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, _this);\n}; // The type of props MyForm receives\n\n\n_c = InnerForm;\n// Wrap our form with the withFormik HoC\nvar MyForm = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: function mapPropsToValues(props) {\n    return {\n      email: props.initialEmail || \"\",\n      password: \"\"\n    };\n  },\n  // Add a custom validation function (this can be async too!)\n  validate: function validate(values) {\n    var errors = {};\n\n    if (!values.email) {\n      errors.email = \"Required\";\n    } else if (!isValidEmail(values.email)) {\n      errors.email = \"Invalid email address\";\n    }\n\n    return errors;\n  },\n  handleSubmit: function handleSubmit(values) {// do submitting things\n  }\n})(InnerForm);\nexport default CreateRepo; // const CreateRepo: React.FC<any> = ({}) => {\n//   return(\n//     <div> create repo</div>\n//   )\n// }\n// export default CreateRepo;\n// import React from \"react\";\n// import { Formik, ErrorMessage } from \"formik\";\n// import { Input, Button, Form } from \"antd\";\n// import * as Yup from \"yup\";\n// const CreateRepo: React.FC<any> = ({}) => {\n//   const createRepo = Yup.object().shape({\n//     name: Yup.string().required(\"Repository name is required\"),\n//     visibility: Yup.string().required(\"Visibility is required\"),\n//   });\n// \tconst handleSubmit = (data: any) => {\n// \t\t// this.props.login(data);\n//   };\n//   return (\n//     <div className=\"container-body\">\n//       <Formik\n//         initialValues={{\n//           name: \"\",\n//           visibility: \"\",\n//         }}\n//         validationSchema={createRepo}\n//         onSubmit={handleSubmit}\n//         render={({ handleSubmit, handleChange, values }) => (\n//           <Form onSubmit={handleSubmit}>\n//             <Form.Item>\n//               <Input\n//                 type=\"text\"\n//                 onChange={handleChange}\n//                 value={values.name}\n//                 name=\"name\"\n//                 placeholder=\"Enter Repo Name\"\n//               />\n//               <ErrorMessage bottom component={ErrorBlock} name=\"email\" />\n//             </Form.Item>\n//             <Form.Item>\n//               <Input\n//                 type=\"password\"\n//                 onChange={handleChange}\n//                 value={values.password}\n//                 name=\"password\"\n//                 placeholder=\"Password\"\n//               />\n//               <ErrorMessage bottom component={ErrorBlock} name=\"password\" />\n//             </Form.Item>\n//             <Button htmlType=\"submit\" className=\"btn\" type=\"primary\">\n//               Signin\n//             </Button>\n//           </Form>\n//         )}\n//       />\n//       <hr className=\"divider\" />\n//       <div className=\"form-group\">\n//         <div className=\"forgot-part text-right\">\n//           <span className=\"forgot\" onClick={onRegister}>\n//             Register your account?\n//           </span>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n// export default CreateRepo;\n\nvar _c;\n\n$RefreshReg$(_c, \"InnerForm\");","map":{"version":3,"sources":["/var/www/html/react-test-ashish/react-next/components/createNewRepo.tsx"],"names":["React","withFormik","Form","Field","InnerForm","props","touched","errors","isSubmitting","message","email","password","MyForm","mapPropsToValues","initialEmail","validate","values","isValidEmail","handleSubmit","CreateRepo"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,UAAT,EAAgDC,IAAhD,EAAsDC,KAAtD,QAAmE,QAAnE,C,CAEA;;AAUA;AACA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAiD;AAAA,MACzDC,OADyD,GACdD,KADc,CACzDC,OADyD;AAAA,MAChDC,MADgD,GACdF,KADc,CAChDE,MADgD;AAAA,MACxCC,YADwC,GACdH,KADc,CACxCG,YADwC;AAAA,MAC1BC,OAD0B,GACdJ,KADc,CAC1BI,OAD0B;AAEjE,sBACE,QAAC,IAAD;AAAA,4BACE;AAAA,gBAAKA;AAAL;AAAA;AAAA;AAAA;AAAA,aADF,eAEE,QAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,IAAI,EAAC;AAAzB;AAAA;AAAA;AAAA;AAAA,aAFF,EAGGH,OAAO,CAACI,KAAR,IAAiBH,MAAM,CAACG,KAAxB,iBAAiC;AAAA,gBAAMH,MAAM,CAACG;AAAb;AAAA;AAAA;AAAA;AAAA,aAHpC,eAKE,QAAC,KAAD;AAAO,MAAA,IAAI,EAAC,UAAZ;AAAuB,MAAA,IAAI,EAAC;AAA5B;AAAA;AAAA;AAAA;AAAA,aALF,EAMGJ,OAAO,CAACK,QAAR,IAAoBJ,MAAM,CAACI,QAA3B,iBAAuC;AAAA,gBAAMJ,MAAM,CAACI;AAAb;AAAA;AAAA;AAAA;AAAA,aAN1C,eAQE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,QAAQ,EAAEH,YAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aARF;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAcD,CAhBD,C,CAkBA;;;KAlBMJ,S;AAwBN;AACA,IAAMQ,MAAM,GAAGX,UAAU,CAA0B;AACjD;AACAY,EAAAA,gBAAgB,EAAE,0BAACR,KAAD,EAAW;AAC3B,WAAO;AACLK,MAAAA,KAAK,EAAEL,KAAK,CAACS,YAAN,IAAsB,EADxB;AAELH,MAAAA,QAAQ,EAAE;AAFL,KAAP;AAID,GAPgD;AASjD;AACAI,EAAAA,QAAQ,EAAE,kBAACC,MAAD,EAAwB;AAChC,QAAIT,MAAgC,GAAG,EAAvC;;AACA,QAAI,CAACS,MAAM,CAACN,KAAZ,EAAmB;AACjBH,MAAAA,MAAM,CAACG,KAAP,GAAe,UAAf;AACD,KAFD,MAEO,IAAI,CAACO,YAAY,CAACD,MAAM,CAACN,KAAR,CAAjB,EAAiC;AACtCH,MAAAA,MAAM,CAACG,KAAP,GAAe,uBAAf;AACD;;AACD,WAAOH,MAAP;AACD,GAlBgD;AAoBjDW,EAAAA,YAAY,EAAE,sBAACF,MAAD,EAAY,CACxB;AACD;AAtBgD,CAA1B,CAAV,CAuBZZ,SAvBY,CAAf;AA2BA,eAAee,UAAf,C,CACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import React from \"react\";\nimport * as Yup from \"yup\";\nimport { withFormik, FormikProps, FormikErrors, Form, Field } from \"formik\";\n\n// Shape of form values\ninterface FormValues {\n  email: string;\n  password: string;\n}\n\ninterface OtherProps {\n  message: string;\n}\n\n// Aside: You may see InjectedFormikProps<OtherProps, FormValues> instead of what comes below in older code.. InjectedFormikProps was artifact of when Formik only exported a HoC. It is also less flexible as it MUST wrap all props (it passes them through).\nconst InnerForm = (props: OtherProps & FormikProps<FormValues>) => {\n  const { touched, errors, isSubmitting, message } = props;\n  return (\n    <Form>\n      <h1>{message}</h1>\n      <Field type=\"email\" name=\"email\" />\n      {touched.email && errors.email && <div>{errors.email}</div>}\n\n      <Field type=\"password\" name=\"password\" />\n      {touched.password && errors.password && <div>{errors.password}</div>}\n\n      <button type=\"submit\" disabled={isSubmitting}>\n        Submit\n      </button>\n    </Form>\n  );\n};\n\n// The type of props MyForm receives\ninterface MyFormProps {\n  initialEmail?: string;\n  message: string; // if this passed all the way through you might do this or make a union type\n}\n\n// Wrap our form with the withFormik HoC\nconst MyForm = withFormik<MyFormProps, FormValues>({\n  // Transform outer props into form values\n  mapPropsToValues: (props) => {\n    return {\n      email: props.initialEmail || \"\",\n      password: \"\",\n    };\n  },\n\n  // Add a custom validation function (this can be async too!)\n  validate: (values: FormValues) => {\n    let errors: FormikErrors<FormValues> = {};\n    if (!values.email) {\n      errors.email = \"Required\";\n    } else if (!isValidEmail(values.email)) {\n      errors.email = \"Invalid email address\";\n    }\n    return errors;\n  },\n\n  handleSubmit: (values) => {\n    // do submitting things\n  },\n})(InnerForm);\n\n\n\nexport default CreateRepo;\n// const CreateRepo: React.FC<any> = ({}) => {\n//   return(\n//     <div> create repo</div>\n//   )\n// }\n// export default CreateRepo;\n\n// import React from \"react\";\n// import { Formik, ErrorMessage } from \"formik\";\n// import { Input, Button, Form } from \"antd\";\n// import * as Yup from \"yup\";\n\n// const CreateRepo: React.FC<any> = ({}) => {\n//   const createRepo = Yup.object().shape({\n//     name: Yup.string().required(\"Repository name is required\"),\n//     visibility: Yup.string().required(\"Visibility is required\"),\n//   });\n\n// \tconst handleSubmit = (data: any) => {\n// \t\t// this.props.login(data);\n//   };\n\n//   return (\n//     <div className=\"container-body\">\n//       <Formik\n//         initialValues={{\n//           name: \"\",\n//           visibility: \"\",\n//         }}\n//         validationSchema={createRepo}\n//         onSubmit={handleSubmit}\n//         render={({ handleSubmit, handleChange, values }) => (\n//           <Form onSubmit={handleSubmit}>\n//             <Form.Item>\n//               <Input\n//                 type=\"text\"\n//                 onChange={handleChange}\n//                 value={values.name}\n//                 name=\"name\"\n//                 placeholder=\"Enter Repo Name\"\n//               />\n//               <ErrorMessage bottom component={ErrorBlock} name=\"email\" />\n//             </Form.Item>\n//             <Form.Item>\n//               <Input\n//                 type=\"password\"\n//                 onChange={handleChange}\n//                 value={values.password}\n//                 name=\"password\"\n//                 placeholder=\"Password\"\n//               />\n//               <ErrorMessage bottom component={ErrorBlock} name=\"password\" />\n//             </Form.Item>\n//             <Button htmlType=\"submit\" className=\"btn\" type=\"primary\">\n//               Signin\n//             </Button>\n//           </Form>\n//         )}\n//       />\n//       <hr className=\"divider\" />\n//       <div className=\"form-group\">\n//         <div className=\"forgot-part text-right\">\n//           <span className=\"forgot\" onClick={onRegister}>\n//             Register your account?\n//           </span>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default CreateRepo;\n"]},"metadata":{},"sourceType":"module"}