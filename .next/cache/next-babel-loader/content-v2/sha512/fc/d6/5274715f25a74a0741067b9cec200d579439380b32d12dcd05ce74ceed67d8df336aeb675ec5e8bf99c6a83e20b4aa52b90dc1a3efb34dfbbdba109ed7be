{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/var/www/html/react-test-ashish/react-next/components/createNewRepo.tsx\";\nimport React from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { withFormik, Form, Field } from \"formik\";\nimport { CREATE_REPO } from \"../queries/queries\"; // Shape of form values\n\n// Use <MyForm /> wherevs\nconst CreateRepo = ({}) => {\n  const [createRepo, {\n    loading,\n    error\n  }] = useMutation(CREATE_REPO, {\n    onCompleted: data => alert(\"Repo Created Successfully\", data),\n    onError: error => console.error(\"Error creating a post\", error)\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(MyForm, {\n      message: \"Create repo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}; // Aside: You may see InjectedFormikProps<OtherProps, FormValues> instead of what comes below in older code.. InjectedFormikProps was artifact of when Formik only exported a HoC. It is also less flexible as it MUST wrap all props (it passes them through).\n\n\nconst InnerForm = props => {\n  const {\n    touched,\n    errors,\n    isSubmitting,\n    message\n  } = props;\n  return /*#__PURE__*/_jsxDEV(Form, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Field, {\n      type: \"text\",\n      name: \"name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), touched.name && errors.name && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: errors.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 39\n    }, this), /*#__PURE__*/_jsxDEV(Field, {\n      name: \"validation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), touched.validation && errors.validation && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: errors.validation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 51\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      disabled: isSubmitting,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}; // Wrap our form with the withFormik HoC\n\n\nconst MyForm = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: props => {\n    return {\n      name: props.initialName || \"\",\n      validation: \"\"\n    };\n  },\n  // Add a custom validation function (this can be async too!)\n  validate: values => {\n    let errors = {};\n\n    if (!values.name) {\n      errors.name = \"Repository name is Required\";\n    }\n\n    if (!values.validation) {\n      errors.validation = \"Validation is Required\";\n    }\n\n    return errors;\n  },\n  handleSubmit: values => {\n    console.log(values); // do submitting things\n  }\n})(InnerForm);\nexport default CreateRepo; // const CreateRepo: React.FC<any> = ({}) => {\n//   return(\n//     <div> create repo</div>\n//   )\n// }\n// export default CreateRepo;\n// import React from \"react\";\n// import { Formik, ErrorMessage } from \"formik\";\n// import { Input, Button, Form } from \"antd\";\n// import * as Yup from \"yup\";\n// const CreateRepo: React.FC<any> = ({}) => {\n//   const createRepo = Yup.object().shape({\n//     name: Yup.string().required(\"Repository name is required\"),\n//     visibility: Yup.string().required(\"Visibility is required\"),\n//   });\n// \tconst handleSubmit = (data: any) => {\n// \t\t// this.props.login(data);\n//   };\n//   return (\n//     <div className=\"container-body\">\n//       <Formik\n//         initialValues={{\n//           name: \"\",\n//           visibility: \"\",\n//         }}\n//         validationSchema={createRepo}\n//         onSubmit={handleSubmit}\n//         render={({ handleSubmit, handleChange, values }) => (\n//           <Form onSubmit={handleSubmit}>\n//             <Form.Item>\n//               <Input\n//                 type=\"text\"\n//                 onChange={handleChange}\n//                 value={values.name}\n//                 name=\"name\"\n//                 placeholder=\"Enter Repo Name\"\n//               />\n//               <ErrorMessage bottom component={ErrorBlock} name=\"email\" />\n//             </Form.Item>\n//             <Form.Item>\n//               <Input\n//                 type=\"password\"\n//                 onChange={handleChange}\n//                 value={values.password}\n//                 name=\"password\"\n//                 placeholder=\"Password\"\n//               />\n//               <ErrorMessage bottom component={ErrorBlock} name=\"password\" />\n//             </Form.Item>\n//             <Button htmlType=\"submit\" className=\"btn\" type=\"primary\">\n//               Signin\n//             </Button>\n//           </Form>\n//         )}\n//       />\n//       <hr className=\"divider\" />\n//       <div className=\"form-group\">\n//         <div className=\"forgot-part text-right\">\n//           <span className=\"forgot\" onClick={onRegister}>\n//             Register your account?\n//           </span>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n// export default CreateRepo;","map":{"version":3,"sources":["/var/www/html/react-test-ashish/react-next/components/createNewRepo.tsx"],"names":["React","useMutation","withFormik","Form","Field","CREATE_REPO","CreateRepo","createRepo","loading","error","onCompleted","data","alert","onError","console","InnerForm","props","touched","errors","isSubmitting","message","name","validation","MyForm","mapPropsToValues","initialName","validate","values","handleSubmit","log"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport * as Yup from \"yup\";\nimport { withFormik, FormikProps, FormikErrors, Form, Field } from \"formik\";\nimport { CREATE_REPO, GET_REPOSITORIES } from \"../queries/queries\";\n\n\n// Shape of form values\ninterface FormValues {\n  name: string;\n  validation: string;\n}\n\ninterface OtherProps {\n  message: string;\n}\n\ninterface MyFormProps {\n  initialName?: string;\n  message: string; // if this passed all the way through you might do this or make a union type\n}\n\n// Use <MyForm /> wherevs\nconst CreateRepo: React.FC<any> = ({}) => {\n\n  const [createRepo, { loading, error }] = useMutation(CREATE_REPO, {\n    onCompleted: (data) => alert(\"Repo Created Successfully\", data),\n    onError: (error) => console.error(\"Error creating a post\", error),\n  });\n\n\n  return (\n    <div>\n      <MyForm message=\"Create repo\" />\n    </div>\n  );\n};\n\n// Aside: You may see InjectedFormikProps<OtherProps, FormValues> instead of what comes below in older code.. InjectedFormikProps was artifact of when Formik only exported a HoC. It is also less flexible as it MUST wrap all props (it passes them through).\nconst InnerForm = (props: OtherProps & FormikProps<FormValues>) => {\n  const { touched, errors, isSubmitting, message } = props;\n  return (\n    <Form>\n      <h1>{message}</h1>\n      <Field type=\"text\" name=\"name\" />\n      {touched.name && errors.name && <div>{errors.name}</div>}\n\n      <Field  name=\"validation\" />\n      {touched.validation && errors.validation && <div>{errors.validation}</div>}\n\n      <button type=\"submit\" disabled={isSubmitting}>\n        Submit\n      </button>\n    </Form>\n  );\n};\n\n// Wrap our form with the withFormik HoC\nconst MyForm = withFormik<MyFormProps, FormValues>({\n  // Transform outer props into form values\n  mapPropsToValues: (props) => {\n    return {\n      name: props.initialName || \"\",\n      validation: \"\",\n    };\n  },\n\n  // Add a custom validation function (this can be async too!)\n  validate: (values: FormValues) => {\n    let errors: FormikErrors<FormValues> = {};\n    if (!values.name) {\n      errors.name = \"Repository name is Required\";\n    } \n    if (!values.validation) {\n      errors.validation = \"Validation is Required\";\n    }\n    return errors;\n  },\n\n  handleSubmit: (values) => {\n    console.log(values)\n    // do submitting things\n  },\n})(InnerForm);\n\nexport default CreateRepo;\n\n// const CreateRepo: React.FC<any> = ({}) => {\n//   return(\n//     <div> create repo</div>\n//   )\n// }\n// export default CreateRepo;\n\n// import React from \"react\";\n// import { Formik, ErrorMessage } from \"formik\";\n// import { Input, Button, Form } from \"antd\";\n// import * as Yup from \"yup\";\n\n// const CreateRepo: React.FC<any> = ({}) => {\n//   const createRepo = Yup.object().shape({\n//     name: Yup.string().required(\"Repository name is required\"),\n//     visibility: Yup.string().required(\"Visibility is required\"),\n//   });\n\n// \tconst handleSubmit = (data: any) => {\n// \t\t// this.props.login(data);\n//   };\n\n//   return (\n//     <div className=\"container-body\">\n//       <Formik\n//         initialValues={{\n//           name: \"\",\n//           visibility: \"\",\n//         }}\n//         validationSchema={createRepo}\n//         onSubmit={handleSubmit}\n//         render={({ handleSubmit, handleChange, values }) => (\n//           <Form onSubmit={handleSubmit}>\n//             <Form.Item>\n//               <Input\n//                 type=\"text\"\n//                 onChange={handleChange}\n//                 value={values.name}\n//                 name=\"name\"\n//                 placeholder=\"Enter Repo Name\"\n//               />\n//               <ErrorMessage bottom component={ErrorBlock} name=\"email\" />\n//             </Form.Item>\n//             <Form.Item>\n//               <Input\n//                 type=\"password\"\n//                 onChange={handleChange}\n//                 value={values.password}\n//                 name=\"password\"\n//                 placeholder=\"Password\"\n//               />\n//               <ErrorMessage bottom component={ErrorBlock} name=\"password\" />\n//             </Form.Item>\n//             <Button htmlType=\"submit\" className=\"btn\" type=\"primary\">\n//               Signin\n//             </Button>\n//           </Form>\n//         )}\n//       />\n//       <hr className=\"divider\" />\n//       <div className=\"form-group\">\n//         <div className=\"forgot-part text-right\">\n//           <span className=\"forgot\" onClick={onRegister}>\n//             Register your account?\n//           </span>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default CreateRepo;\n"]},"metadata":{},"sourceType":"module"}