{"ast":null,"code":"import _taggedTemplateLiteral from \"/var/www/html/react-test-ashish/react-next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation createRepo($name: String!, $visibility: RepositoryVisibility!) {\\n    createRepository(input: { name: $name, visibility: $visibility }) {\\n      clientMutationId\\n      repository {\\n        id\\n        nameWithOwner\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  query getRepositories {\\n    viewer {\\n      repositories(first: 100) {\\n        totalCount\\n        nodes {\\n          name\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query getProfile {\\n    viewer {\\n      login\\n      email\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql } from \"@apollo/client\";\n/**\n * query for username and email\n */\n\nvar GET_PROFILE = gql(_templateObject());\n/**\n * query for repository list\n */\n\nvar GET_REPOSITORIES = gql(_templateObject2());\nvar CREATE_REPO = gql(_templateObject3());\nexport { GET_PROFILE, GET_REPOSITORIES, CREATE_REPO };","map":{"version":3,"sources":["/var/www/html/react-test-ashish/react-next/queries/queries.js"],"names":["gql","GET_PROFILE","GET_REPOSITORIES","CREATE_REPO"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,GAAT,QAAoB,gBAApB;AAEA;AACA;AACA;;AACA,IAAMC,WAAW,GAAGD,GAAH,mBAAjB;AASA;AACA;AACA;;AACA,IAAME,gBAAgB,GAAGF,GAAH,oBAAtB;AAaA,IAAMG,WAAW,GAAGH,GAAH,oBAAjB;AAYA,SAASC,WAAT,EAAsBC,gBAAtB,EAAwCC,WAAxC","sourcesContent":["import { gql } from \"@apollo/client\";\n\n/**\n * query for username and email\n */\nconst GET_PROFILE = gql`\n  query getProfile {\n    viewer {\n      login\n      email\n    }\n  }\n`;\n\n/**\n * query for repository list\n */\nconst GET_REPOSITORIES = gql`\n  query getRepositories {\n    viewer {\n      repositories(first: 100) {\n        totalCount\n        nodes {\n          name\n        }\n      }\n    }\n  }\n`;\n\nconst CREATE_REPO = gql`\n  mutation createRepo($name: String!, $visibility: RepositoryVisibility!) {\n    createRepository(input: { name: $name, visibility: $visibility }) {\n      clientMutationId\n      repository {\n        id\n        nameWithOwner\n      }\n    }\n  }\n`;\n\nexport { GET_PROFILE, GET_REPOSITORIES, CREATE_REPO };"]},"metadata":{},"sourceType":"module"}