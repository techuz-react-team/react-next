{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/var/www/html/react-test-ashish/react-next/pages/_app.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ApolloProvider, ApolloClient, InMemoryCache, ApolloLink, HttpLink } from '@apollo/client';\nimport { onError } from \"@apollo/client/link/error\";\nimport '../styles.css';\nconst GITHUB_BASE_URL = \"https://api.github.com/graphql\";\nconst httpLink = new HttpLink({\n  uri: GITHUB_BASE_URL,\n  headers: {\n    authorization: `Bearer 619c180a105016710dc70c7fd0a0778ce872500b` // authorization: `Bearer ${process.env.REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN}`,\n\n  }\n});\nconst errorLink = onError(({\n  graphQLErrors,\n  networkError\n}) => {\n  if (graphQLErrors) {\n    graphQLErrors.map(({\n      message,\n      locations,\n      path\n    }) => console.log(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`));\n  }\n\n  if (networkError) {\n    console.log(`[Network error]: ${networkError}`);\n  }\n});\nconst link = ApolloLink.from([errorLink, httpLink]);\nconst client = new ApolloClient({\n  uri: GITHUB_BASE_URL,\n  cache: new InMemoryCache(),\n  link\n});\n\nconst MyApp = ({\n  Component,\n  pageProps\n}) => {\n  return /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: client,\n    children: /*#__PURE__*/_jsxDEV(Component, _objectSpread({}, pageProps), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n\nexport default MyApp;","map":{"version":3,"sources":["/var/www/html/react-test-ashish/react-next/pages/_app.tsx"],"names":["ApolloProvider","ApolloClient","InMemoryCache","ApolloLink","HttpLink","onError","GITHUB_BASE_URL","httpLink","uri","headers","authorization","errorLink","graphQLErrors","networkError","map","message","locations","path","console","log","link","from","client","cache","MyApp","Component","pageProps"],"mappings":";;;;;;;;;AACA,SAASA,cAAT,EAAyBC,YAAzB,EAAuCC,aAAvC,EAAsDC,UAAtD,EAAkEC,QAAlE,QAAkF,gBAAlF;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,OAAO,eAAP;AAEA,MAAMC,eAAe,GAAG,gCAAxB;AAEA,MAAMC,QAAQ,GAAG,IAAIH,QAAJ,CAAa;AAC5BI,EAAAA,GAAG,EAAEF,eADuB;AAE5BG,EAAAA,OAAO,EAAE;AACPC,IAAAA,aAAa,EAAG,iDADT,CAEP;;AAFO;AAFmB,CAAb,CAAjB;AAQA,MAAMC,SAAS,GAAGN,OAAO,CAAC,CAAC;AAAEO,EAAAA,aAAF;AAAiBC,EAAAA;AAAjB,CAAD,KAAqC;AAC7D,MAAID,aAAJ,EAAmB;AACjBA,IAAAA,aAAa,CAACE,GAAd,CAAkB,CAAC;AAAEC,MAAAA,OAAF;AAAWC,MAAAA,SAAX;AAAsBC,MAAAA;AAAtB,KAAD,KAChBC,OAAO,CAACC,GAAR,CACG,6BAA4BJ,OAAQ,eAAcC,SAAU,WAAUC,IAAK,EAD9E,CADF;AAKD;;AACD,MAAIJ,YAAJ,EAAkB;AAChBK,IAAAA,OAAO,CAACC,GAAR,CAAa,oBAAmBN,YAAa,EAA7C;AACD;AACF,CAXwB,CAAzB;AAaA,MAAMO,IAAI,GAAGjB,UAAU,CAACkB,IAAX,CAAgB,CAACV,SAAD,EAAYJ,QAAZ,CAAhB,CAAb;AAEA,MAAMe,MAAM,GAAG,IAAIrB,YAAJ,CAAiB;AAC9BO,EAAAA,GAAG,EAAEF,eADyB;AAE9BiB,EAAAA,KAAK,EAAE,IAAIrB,aAAJ,EAFuB;AAG9BkB,EAAAA;AAH8B,CAAjB,CAAf;;AAMA,MAAMI,KAAyB,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAD,KAA8B;AAC9D,sBACE,QAAC,cAAD;AAAgB,IAAA,MAAM,EAAEJ,MAAxB;AAAA,2BACE,QAAC,SAAD,oBAAeI,SAAf;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAND;;AAQA,eAAeF,KAAf","sourcesContent":["import type { AppProps } from 'next/app';\nimport { ApolloProvider, ApolloClient, InMemoryCache, ApolloLink, HttpLink } from '@apollo/client';\nimport { onError } from \"@apollo/client/link/error\";\nimport '../styles.css'\n\nconst GITHUB_BASE_URL = \"https://api.github.com/graphql\";\n\nconst httpLink = new HttpLink({\n  uri: GITHUB_BASE_URL,\n  headers: {\n    authorization: `Bearer 619c180a105016710dc70c7fd0a0778ce872500b`,\n    // authorization: `Bearer ${process.env.REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN}`,\n  },\n});\n\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors) {\n    graphQLErrors.map(({ message, locations, path }) =>\n      console.log(\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n      )\n    );\n  }\n  if (networkError) {\n    console.log(`[Network error]: ${networkError}`);\n  }\n});\n\nconst link = ApolloLink.from([errorLink, httpLink]);\n\nconst client = new ApolloClient({\n  uri: GITHUB_BASE_URL,\n  cache: new InMemoryCache(),\n  link\n});\n\nconst MyApp: React.FC<AppProps> = ({ Component, pageProps }) => {\n  return (\n    <ApolloProvider client={client}>\n      <Component {...pageProps} />\n    </ApolloProvider>\n  );\n}\n\nexport default MyApp;"]},"metadata":{},"sourceType":"module"}