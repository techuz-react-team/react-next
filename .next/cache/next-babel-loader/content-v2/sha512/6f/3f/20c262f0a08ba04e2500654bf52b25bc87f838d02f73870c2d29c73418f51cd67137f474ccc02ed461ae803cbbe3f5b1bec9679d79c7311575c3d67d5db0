{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/var/www/html/react-test-ashish/react-next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/var/www/html/react-test-ashish/react-next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"/var/www/html/react-test-ashish/react-next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/var/www/html/react-test-ashish/react-next/components/createNewRepo.tsx\",\n    _this = this;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation RegisterMutation($email: String!, $password: String!) {\\n    register(email: $email, password: $password)\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { Field, Formik } from \"formik\";\nimport React from \"react\";\nimport { Mutation } from 'react-apollo';\nvar registerMutation = gql(_templateObject());\nexport default (function () {\n  return /*#__PURE__*/_jsxDEV(Mutation, {\n    mutation: registerMutation,\n    children: function children(register) {\n      return /*#__PURE__*/_jsxDEV(Formik, {\n        validateOnBlur: false,\n        validateOnChange: false,\n        onSubmit: /*#__PURE__*/function () {\n          var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data, _ref) {\n            var setErrors, response;\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    setErrors = _ref.setErrors;\n                    _context.prev = 1;\n                    _context.next = 4;\n                    return register({\n                      variables: {\n                        data: data\n                      }\n                    });\n\n                  case 4:\n                    response = _context.sent;\n                    console.log(response);\n                    _context.next = 11;\n                    break;\n\n                  case 8:\n                    _context.prev = 8;\n                    _context.t0 = _context[\"catch\"](1);\n                    console.log(_context.t0);\n\n                  case 11:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee, null, [[1, 8]]);\n          }));\n\n          return function (_x, _x2) {\n            return _ref2.apply(this, arguments);\n          };\n        }(),\n        initialValues: {\n          email: \"\",\n          password: \"\"\n        },\n        children: function children(_ref3) {\n          var handleSubmit = _ref3.handleSubmit;\n          return /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(Field, {\n              name: \"email\",\n              placeholder: \"email\",\n              component: InputField\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 17\n            }, _this), /*#__PURE__*/_jsxDEV(Field, {\n              name: \"password\",\n              placeholder: \"password\",\n              type: \"password\",\n              component: InputField\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 17\n            }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              children: \"submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 17\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 15\n          }, _this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 11\n      }, _this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 7\n  }, _this);\n}); // const CreateRepo: React.FC<any> = ({}) => { \n//   return(\n//     <div> create repo</div>\n//   )\n// }\n// export default CreateRepo;\n// import React from \"react\";\n// import { Formik, ErrorMessage } from \"formik\";\n// import { Input, Button, Form } from \"antd\";\n// import * as Yup from \"yup\";\n// const CreateRepo: React.FC<any> = ({}) => {\n//   const createRepo = Yup.object().shape({\n//     name: Yup.string().required(\"Repository name is required\"),\n//     visibility: Yup.string().required(\"Visibility is required\"),\n//   });\n// \tconst handleSubmit = (data: any) => {\n// \t\t// this.props.login(data);\n//   };\n//   return (\n//     <div className=\"container-body\">\n//       <Formik\n//         initialValues={{\n//           name: \"\",\n//           visibility: \"\",\n//         }}\n//         validationSchema={createRepo}\n//         onSubmit={handleSubmit}\n//         render={({ handleSubmit, handleChange, values }) => (\n//           <Form onSubmit={handleSubmit}>\n//             <Form.Item>\n//               <Input\n//                 type=\"text\"\n//                 onChange={handleChange}\n//                 value={values.name}\n//                 name=\"name\"\n//                 placeholder=\"Enter Repo Name\"\n//               />\n//               <ErrorMessage bottom component={ErrorBlock} name=\"email\" />\n//             </Form.Item>\n//             <Form.Item>\n//               <Input\n//                 type=\"password\"\n//                 onChange={handleChange}\n//                 value={values.password}\n//                 name=\"password\"\n//                 placeholder=\"Password\"\n//               />\n//               <ErrorMessage bottom component={ErrorBlock} name=\"password\" />\n//             </Form.Item>\n//             <Button htmlType=\"submit\" className=\"btn\" type=\"primary\">\n//               Signin\n//             </Button>\n//           </Form>\n//         )}\n//       />\n//       <hr className=\"divider\" />\n//       <div className=\"form-group\">\n//         <div className=\"forgot-part text-right\">\n//           <span className=\"forgot\" onClick={onRegister}>\n//             Register your account?\n//           </span>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n// export default CreateRepo;","map":{"version":3,"sources":["/var/www/html/react-test-ashish/react-next/components/createNewRepo.tsx"],"names":["Field","Formik","React","Mutation","registerMutation","gql","register","data","setErrors","variables","response","console","log","email","password","handleSubmit","InputField"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,SAASA,KAAT,EAAgBC,MAAhB,QAA8B,QAA9B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAkC,cAAlC;AAGA,IAAMC,gBAAgB,GAAGC,GAAH,mBAAtB;AAMA,gBAAe,YAAM;AACnB,sBACI,QAAC,QAAD;AACE,IAAA,QAAQ,EAAED,gBADZ;AAAA,cAGG,kBAAAE,QAAQ;AAAA,0BACP,QAAC,MAAD;AACE,QAAA,cAAc,EAAE,KADlB;AAEE,QAAA,gBAAgB,EAAE,KAFpB;AAGE,QAAA,QAAQ;AAAA,+EAAE,iBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAeC,oBAAAA,SAAf,QAAeA,SAAf;AAAA;AAAA;AAAA,2BAEiBF,QAAQ,CAAC;AAC9BG,sBAAAA,SAAS,EAAE;AACTF,wBAAAA,IAAI,EAAJA;AADS;AADmB,qBAAD,CAFzB;;AAAA;AAEAG,oBAAAA,QAFA;AAONC,oBAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AAPM;AAAA;;AAAA;AAAA;AAAA;AASNC,oBAAAA,OAAO,CAACC,GAAR;;AATM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAF;;AAAA;AAAA;AAAA;AAAA,WAHV;AAeE,QAAA,aAAa,EAAE;AACbC,UAAAA,KAAK,EAAE,EADM;AAEbC,UAAAA,QAAQ,EAAE;AAFG,SAfjB;AAAA,kBAoBG;AAAA,cAAGC,YAAH,SAAGA,YAAH;AAAA,8BACC;AAAM,YAAA,QAAQ,EAAEA,YAAhB;AAAA,oCACE,QAAC,KAAD;AACE,cAAA,IAAI,EAAC,OADP;AAEE,cAAA,WAAW,EAAC,OAFd;AAGE,cAAA,SAAS,EAAEC;AAHb;AAAA;AAAA;AAAA;AAAA,qBADF,eAME,QAAC,KAAD;AACE,cAAA,IAAI,EAAC,UADP;AAEE,cAAA,WAAW,EAAC,UAFd;AAGE,cAAA,IAAI,EAAC,UAHP;AAIE,cAAA,SAAS,EAAEA;AAJb;AAAA;AAAA;AAAA;AAAA,qBANF,eAYE;AAAQ,cAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAZF;AAAA;AAAA;AAAA;AAAA;AAAA,mBADD;AAAA;AApBH;AAAA;AAAA;AAAA;AAAA,eADO;AAAA;AAHX;AAAA;AAAA;AAAA;AAAA,WADJ;AA6CD,CA9CD,E,CAgDA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import { Field, Formik } from \"formik\";\nimport React from \"react\";\nimport { Mutation, graphql } from 'react-apollo'\nimport { RegisterMutationVariables, RegisterMutation } from \"../../schemaTypes\";\n\nconst registerMutation = gql`\n  mutation RegisterMutation($email: String!, $password: String!) {\n    register(email: $email, password: $password)\n  }\n`;\n\nexport default () => {\n  return (\n      <Mutation<RegisterMutation, RegisterMutationVariables>\n        mutation={registerMutation}\n      >\n        {register => (\n          <Formik\n            validateOnBlur={false}\n            validateOnChange={false}\n            onSubmit={async (data, { setErrors }) => {\n              try {\n                const response = await register({\n                  variables: {\n                    data\n                  }\n                });\n                console.log(response);\n              } catch (err) {\n                console.log(err)\n              }\n            }}\n            initialValues={{\n              email: \"\",\n              password: \"\"\n            }}\n          >\n            {({ handleSubmit }) => (\n              <form onSubmit={handleSubmit}>\n                <Field\n                  name=\"email\"\n                  placeholder=\"email\"\n                  component={InputField}\n                />\n                <Field\n                  name=\"password\"\n                  placeholder=\"password\"\n                  type=\"password\"\n                  component={InputField}\n                />\n                <button type=\"submit\">submit</button>\n              </form>\n            )}\n          </Formik>\n        )}\n      </Mutation>\n  );\n};\n\n// const CreateRepo: React.FC<any> = ({}) => { \n//   return(\n//     <div> create repo</div>\n//   )\n// }\n// export default CreateRepo;\n\n// import React from \"react\";\n// import { Formik, ErrorMessage } from \"formik\";\n// import { Input, Button, Form } from \"antd\";\n// import * as Yup from \"yup\";\n\n// const CreateRepo: React.FC<any> = ({}) => {\n//   const createRepo = Yup.object().shape({\n//     name: Yup.string().required(\"Repository name is required\"),\n//     visibility: Yup.string().required(\"Visibility is required\"),\n//   });\n\n// \tconst handleSubmit = (data: any) => {\n// \t\t// this.props.login(data);\n//   };\n  \n//   return (\n//     <div className=\"container-body\">\n//       <Formik\n//         initialValues={{\n//           name: \"\",\n//           visibility: \"\",\n//         }}\n//         validationSchema={createRepo}\n//         onSubmit={handleSubmit}\n//         render={({ handleSubmit, handleChange, values }) => (\n//           <Form onSubmit={handleSubmit}>\n//             <Form.Item>\n//               <Input\n//                 type=\"text\"\n//                 onChange={handleChange}\n//                 value={values.name}\n//                 name=\"name\"\n//                 placeholder=\"Enter Repo Name\"\n//               />\n//               <ErrorMessage bottom component={ErrorBlock} name=\"email\" />\n//             </Form.Item>\n//             <Form.Item>\n//               <Input\n//                 type=\"password\"\n//                 onChange={handleChange}\n//                 value={values.password}\n//                 name=\"password\"\n//                 placeholder=\"Password\"\n//               />\n//               <ErrorMessage bottom component={ErrorBlock} name=\"password\" />\n//             </Form.Item>\n//             <Button htmlType=\"submit\" className=\"btn\" type=\"primary\">\n//               Signin\n//             </Button>\n//           </Form>\n//         )}\n//       />\n//       <hr className=\"divider\" />\n//       <div className=\"form-group\">\n//         <div className=\"forgot-part text-right\">\n//           <span className=\"forgot\" onClick={onRegister}>\n//             Register your account?\n//           </span>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default CreateRepo;\n"]},"metadata":{},"sourceType":"module"}